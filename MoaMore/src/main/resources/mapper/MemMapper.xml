<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.moa.mem.mapper.MemMapper">
<!-- 	마이페이지 홈  -->
	<select id="openSesame" resultType="MemVO">
		SELECT  r.id as id_co,
				r.ttl,
				r.expr_dt,
				r.recruit_no,
				r.co_img,
				c.co_nm,
				m.email
		 FROM co c 
		 join recruit_anun r
		   ON r.id = c.id
		 join member m
		   on c.id = m.id
		   
		WHERE r.id IN (SELECT id_co
		                 FROM following
		                WHERE id_mem = #{id})
	</select>
<!-- 공고 검색 조건 갯수 뷰 -->
	<select id="getCount" resultType="SearchVO">
		SELECT 
				(SELECT COUNT(aply_st) AS count_aply_st
				FROM recruit_anum_st
				WHERE aply_st ='b1') as count_aply_st
				,
				(SELECT COUNT(aply_st) AS
				count_deny
				FROM recruit_anum_st
				WHERE aply_st ='b2') as count_deny
				,
				(SELECT
				COUNT(st) AS count_st
				FROM recruit_anum_st
				WHERE st ='1') as count_st
		  FROM dual
	</select>


<!-- 공고 검색 -->
	<select id="getSearch" resultType="MemVO">
		select d.recruit_no,
				d.aply_dt,
				d.aply_st,
				d.ttl,
				d.expr_dt,
				d.st,
				e.expr_st,
				d.ma_buss
		from	(select 	s.recruit_no,
							s.aply_dt,
							get_common(s.aply_st) as aply_st,
							r.ttl,
							r.expr_dt,
							s.st,
							r.ma_buss
					   from recruit_anum_st s 
					   join recruit_anun r
						  on s.recruit_no =	r.recruit_no
						where s.id = #{id}
						<if test="period == 7">
							and s.aply_dt BETWEEN TO_CHAR(sysdate-7,'yyyy-MM-dd') and TO_CHAR(sysdate,'yyyy-MM-dd')
						</if>
						<if test="period == 1">
							and s.aply_dt BETWEEN TO_CHAR(ADD_MONTHS(sysdate,-1),'yyyy-MM-dd')  and TO_CHAR(sysdate,'yyyy-MM-dd')
						</if>
						<if test="period == 2">
							and s.aply_dt BETWEEN TO_CHAR(ADD_MONTHS(sysdate,-2),'yyyy-MM-dd')  and TO_CHAR(sysdate,'yyyy-MM-dd')
						</if>
						<if test="period == 3">
							and s.aply_dt BETWEEN TO_CHAR(ADD_MONTHS(sysdate,-3),'yyyy-MM-dd')  and TO_CHAR(sysdate,'yyyy-MM-dd')
						</if>
						<if test='expir == "J2"'>
							<![CDATA[and sysdate - to_date(r.expr_dt,'yyyy-MM-dd') > 0]]>
						</if>
						<if test='expir == "J1"'>
							<![CDATA[and sysdate - to_date(r.expr_dt,'yyyy-MM-dd') <= 0]]>
						</if>
						<if test='startDt != null and endDt != null '>
							and s.aply_dt BETWEEN TO_CHAR(#{startDt},'yyyy-MM-dd') and  TO_CHAR(#{endDt},'yyyy-MM-dd')
						</if>
						<if test='st != null '>
							and s.st = #{st}
						</if>
						<if test='aplySt != null '>
							and s.aply_st = TO_CHAR(#{aplySt},'yyyy-MM-dd')
						</if>
			) d 
		join (select recruit_no, 
		             (trunc(to_date(expr_dt,'yyyy-MM-dd')- sysdate)) as
					 expr_st
				from recruit_anun) e
		on d.recruit_no = e.recruit_no
	</select>
	
	<delete id="delAnun" parameterType="SearchVO">
	delete 
	  from recruit_anum_st 
	 where recruit_no = #{recruitNo} and id = #{id}
	</delete>
	
	
<!-- 	개인정보 조회 -->
	<select id="getMemInfo" resultType="MemInfoVO">
	select name,
		   ph,
		   ph_cl,
		   email,
		   blog,
		   post,
		   gen,
		   birth,
		   addr
	  from member
	 where id = #{id}
	</select>
	
<!-- 	스킬 번호 생성 -->
	<select id="getSkillNo" resultType="String">
		 SELECT 'SKILL'|| TO_CHAR(skill_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	자격증 번호 생성 -->
	<select id="getLicnNo" resultType="String">
		 SELECT 'LICN'|| TO_CHAR(Licn_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	수상 번호 생성 -->
	<select id="getArdNo" resultType="String">
		 SELECT 'ARD'|| TO_CHAR(Ard_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	학력번호 생성 -->
	<select id="getSchNo" resultType="String">
		 SELECT 'SCH'|| TO_CHAR(sch_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	경력번호생성 -->
	<select id="getCarrNo" resultType="String">
		 SELECT 'CARR'|| TO_CHAR(carr_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	교육번호 생성 -->
	<select id="getEduNo" resultType="String">
		 SELECT 'EDU'|| TO_CHAR(edu_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	자소서 번호 생성 -->
	<select id="getIntroNo" resultType="String">
		 SELECT 'INTRO'|| TO_CHAR(intro_seq.NEXTVAL)
        FROM dual
	</select>
<!-- 	이력서 번호 생성 -->
	<select id="getResumeNo" resultType="String">
	 SELECT 'RESUME'|| TO_CHAR(resume_seq.NEXTVAL)
        FROM dual
	</select>
	
<!-- 	스킬 입력 -->
	 <insert id="insertSkill" parameterType="SkillVO" statementType="CALLABLE"  >
     call insert_skill (
        #{skillNo, mode=INOUT, jdbcType=VARCHAR },
        #{skill}
      )
 	 </insert>
 	 
<!--  	 학력입력 -->
 	 <insert id="insertSchool" parameterType="ShcrVO" statementType="CALLABLE" >
     call insert_shcr (
        #{shcrNo, mode=INOUT, jdbcType=VARCHAR}, 
        #{fg}, 
        #{breu}, 
        #{mj}, 
        #{joinYy},
        #{retiYy}, 
        #{pnt}, 
        #{shcrSt}, 
        #{ttScore}
      )
 	 </insert>
 	 
<!--  	 수상입력 -->
 	 <insert id="insertAward" parameterType="ArdVO" statementType="CALLABLE"  >
     call insert_ard (
       #{ardNo, mode=INOUT, jdbcType=VARCHAR}, 
       #{ardNm}, 
       #{breu}, 
       #{cntn}, 
       #{issuYy}
      )
 	 </insert>
 	 
<!--  	 교육입력 -->
 	 <insert id="insertEducate" parameterType="EduVO" statementType="CALLABLE" >
     call insert_edu (
        #{eduNo, mode=INOUT, jdbcType=VARCHAR}, 
        #{eduNm}, 
        #{breu}, 
        #{joinYy},
        #{retiYy}, 
        #{cntn}
      )
 	 </insert>
 	 
<!--  	 자소서 입력 -->
 	 <insert id="insertIntro" parameterType="IntroVO" statementType="CALLABLE" >
     call insert_intro (
        #{introNo, mode=INOUT, jdbcType=VARCHAR},
        #{ttl},
        #{cntn}
      )
 	 </insert>
 	 
<!--  	 자격증 입력 -->
 	 <insert id="insertLicence" parameterType="LicnVO" statementType="CALLABLE" >
     {call insert_licn (
        #{licnNo, mode=INOUT, jdbcType=VARCHAR}, 
        #{licnNm}, 
        #{breu}, 
        #{issuMm}
        
      )}
 	 </insert>
 	 
<!--  	 경력입력 -->
 	 <insert id="insertCarrer" parameterType="CarrVO" statementType="CALLABLE" >
     call insert_carr (
        #{carrNo, mode=INOUT, jdbcType=VARCHAR},
        #{co},
        #{wkdty},
        #{depart},
        #{duty},
        #{joinYy},
        #{retiYy},
        #{buss},
        #{carrSt}
      )
 	 </insert>
<!--  	 개인정보 입력(업데이트) -->
		<update id="insertMem">   	
		UPDATE member
		SET  email = #{email}, 
			 ph=#{ph},
			 ph_cl=#{phCl},
			 addr=#{addr},
			 post=#{post} 
		where id = #{id}
		</update>
		
	<insert id="insertResume" parameterType="ResumeVO">
		insert into resume (resume_no, 
							id, 
							ttl, 
							carr_no,
							edu_no,
							licn_no,
							ard_no, 
							intro_no,
							shcr_no,
							skill_no,
							reg_dt)
		values(#{resumeNo},
			   #{id},
			   #{ttl},
			   #{carrNo},
			   #{eduNo},
			   #{licnNo},
			   #{ardNo},
			   #{introNo},
			   #{shcrNo},
			   #{skillNo},
			   to_char(sysdate,'yyyy-MM-dd'))
	</insert>
 	 

</mapper>